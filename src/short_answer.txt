Before submitting this file, make sure that there are no more TODO
values left in the file (besides the one in this introduction of course).

Warmup
------
Q1: Decode the character(s) from the bit sequence `0101100011`
A1: MOONS

Q2: Encode the string "SONS" into its bit sequence.
A2: 011100011

Q3: Give the flattened sequences for the encoding tree that you used for Questions 1 and 2.
A3: 1101000 NMSO

Q4: Cover up the example trees and confirm that you can correctly rebuild the tree from its flattened sequences. What process did you go through to convince yourself that you could properly rebuild the tree from the two flattened sequences?
A4: Reconstruct the tree using just the number sequence to get a sense of where the leaves are.
Then using the character sequence to add the appropriate character at the leaves from left to right.

Q5. Show an optimal Huffman coding tree for the input "BOOKKEEPER".
A5: {E:3, O:2, K:2, B:1, P:1, R:1} -> 11011000100 EPRBOK


Q6. A node in a Huffman coding tree has two non-null children or zero. Why is not possible for a node to have just one non-null child?
A6: The tree is constructed in a bottom-up manner. Every non-leaf node is created from combining two nodes. Thus, it's
impossible to have a node with only one child.

Q7. Describe the difference in shape of a Huffman coding tree that will lead to significant savings for compression versus one that will achieve little to no compression.
A7: Huffman coding tree allowes lower depth for frequent characters -> saving for compression. If all characters have
the same depth, hence, a balanced binary tree, there would be little compression.
Another thing to keep in mind if that no two characters can share the same prefix in the coding tree.
